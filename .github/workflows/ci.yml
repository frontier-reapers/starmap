name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Job 1: Run JavaScript unit tests
  test-js:
    name: JavaScript Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run JavaScript unit tests
        run: npm run test:unit:js
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: js-coverage
          path: coverage/
          retention-days: 7

  # Job 2: Run Python unit tests
  test-python:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Python unit tests
        run: npm run test:unit:py
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-coverage
          path: htmlcov/
          retention-days: 7

  # Job 3: Generate test data and run integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Create data directories
        run: mkdir -p data public/data
      
      - name: Download latest EVE Frontier static.db
        run: |
          # Get the latest release info from the evefrontier_datasets repository
          RELEASE_INFO=$(curl -s https://api.github.com/repos/Scetrov/evefrontier_datasets/releases/latest)
          
          # Extract the download URL for static.db asset
          DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "static.db") | .browser_download_url')
          
          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
            echo "Error: Could not find static.db in latest release"
            echo "Available assets:"
            echo "$RELEASE_INFO" | jq -r '.assets[].name'
            exit 1
          fi
          
          echo "Downloading static.db from: $DOWNLOAD_URL"
          curl -L -o data/static.db "$DOWNLOAD_URL"
          
          # Verify the file was downloaded
          if [ -f data/static.db ]; then
            FILE_SIZE=$(stat -c%s data/static.db 2>/dev/null || stat -f%z data/static.db)
            echo "Successfully downloaded static.db (size: $FILE_SIZE bytes)"
          else
            echo "Error: Failed to download static.db"
            exit 1
          fi
      
      - name: Generate binary data from SQLite
        run: npm run build:data
      
      - name: Run integration tests
        run: npm run test:integration
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Job 4: Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-js, test-python, test-integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for web image
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-web
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.web
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Extract metadata for data builder image
        id: meta-data
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-data
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push data builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.data
          push: true
          tags: ${{ steps.meta-data.outputs.tags }}
          labels: ${{ steps.meta-data.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Lint (optional but recommended)
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
